// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String           @id @default(cuid())
  name           String?
  email          String?          @unique
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
  personalRanges PersonalRanges[]
  sharedRanges   SharedRanges[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model PersonalRanges {
  id           String                 @id @default(cuid())
  userId       String                 @unique @map("user_id")
  rangesJson   Json                   @map("ranges_json")
  user         User                   @relation(fields: [userId], references: [id])
  sharedRanges PersonalSharedRanges[]
}

model SharedRanges {
  id             String                 @id @default(cuid())
  ownerUserId    String                 @map("owner_user_id")
  ownerUser      User                   @relation(fields: [ownerUserId], references: [id])
  personalRanges PersonalSharedRanges[]
}

model PersonalSharedRanges {
  id               String         @id @default(cuid())
  personalRangesId String         @map("personal_ranges_id")
  personalRanges   PersonalRanges @relation(fields: [personalRangesId], references: [id])
  sharedRangesId   String         @map("shared_ranges_id")
  sharedRanges     SharedRanges   @relation(fields: [sharedRangesId], references: [id])
}

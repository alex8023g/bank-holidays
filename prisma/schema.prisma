generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String          @id @default(cuid())
  name           String?
  email          String?         @unique
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  personalRanges PersonalRanges?
  sessions       Session[]
  sharedRanges   SharedRanges[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model PersonalRanges {
  id           String                 @id @default(cuid())
  userId       String?                @unique @map("user_id")
  rangesJson   Json                   @map("ranges_json")
  userName     String                 @default("") @map("user_name")
  user         User?                  @relation(fields: [userId], references: [id])
  sharedRanges PersonalSharedRanges[]
}

model SharedRanges {
  id             String                 @id @default(cuid())
  ownerUserId    String                 @map("owner_user_id")
  name           String                 @default("Общий график отпусков №1")
  year           Int                    @default(2025)
  personalRanges PersonalSharedRanges[]
  ownerUser      User?                  @relation(fields: [ownerUserId], references: [id])
}

model PersonalSharedRanges {
  id               String         @id @default(cuid())
  personalRangesId String         @map("personal_ranges_id")
  sharedRangesId   String         @map("shared_ranges_id")
  personalRanges   PersonalRanges @relation(fields: [personalRangesId], references: [id])
  sharedRanges     SharedRanges   @relation(fields: [sharedRangesId], references: [id])
}

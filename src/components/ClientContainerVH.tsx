'use client';
import {
  createContext,
  Dispatch,
  ReactNode,
  SetStateAction,
  useEffect,
  useState,
} from 'react';
import { useLocalStorage } from '@react-hooks-library/core';
import dayjs from 'dayjs';
import { toast, Toaster } from 'sonner';
import { Session } from 'next-auth';
import { useRouter } from 'next/navigation';
import {
  deletePersonalSharedRangesByPersonalRangesId,
  deletePersonalRangesById,
  getPersonalRangesByUserId,
  upsertPersonalRangesByUserIdOrLsRangesId,
} from '@/lib/actions';
import { SessionProvider } from 'next-auth/react';

export type DateRange = {
  year: number;
  start: { dayOfYear: number; dateStr: string };
  end: { dayOfYear: number; dateStr: string };
};

export type SelectedDateContext = {
  selectedYear: number;
  setSelectedYear: Dispatch<SetStateAction<number>>;
  dateRanges: DateRange[];
  setDateRanges: (value: DateRange[]) => void;
  lsRangesId: string;
  setLsRangesId: (value: string) => void;
  selectedDayOfYear: number | null;
  setSelectedDayOfYear: Dispatch<SetStateAction<number | null>>;
  hoverDayOfYear: number | null;
  setHoverDayOfYear: Dispatch<SetStateAction<number | null>>;
  selectedRange: DateRange | null;
  setSelectedRange: Dispatch<SetStateAction<DateRange | null>>;
};

export const ThemeContext = createContext<SelectedDateContext | null>(null);

export default function ClientContainerVH({
  children,
  session,
}: {
  session: Session | null;
  children: ReactNode;
}) {
  console.log('üöÄ ~ ClientContainerVH start ');
  const [dateRanges, setDateRanges] = useLocalStorage<DateRange[]>(
    'otpuskPlanRanges',
    [],
  );
  const [lsRangesId, setLsRangesId] = useLocalStorage<string>(
    'otpuskPlanLsRangesId',
    '',
  );
  const [selectedDayOfYear, setSelectedDayOfYear] = useState<number | null>(
    null,
  );
  const [hoverDayOfYear, setHoverDayOfYear] = useState<number | null>(null);
  const [selectedYear, setSelectedYear] = useState(dayjs().year());
  const [selectedRange, setSelectedRange] = useState<DateRange | null>(null);

  useEffect(() => {
    // –≤ —Å–ª—É—á–∞–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—ã–ø–æ–ª–Ω—è–µ–º:
    (async () => {
      if (session) {
        toast.success('–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è!');
        // router.push('/');
        const personalRangesDBRes = await getPersonalRangesByUserId({
          userId: session.user.id,
        });

        if (personalRangesDBRes?.rangesJson) {
          // –µ—Å–ª–∏ –µ—Å—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –≤ –±–¥, —Ç–æ –∫–æ–ø–∏—Ä—É–µ–º –µ–≥–æ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
          setDateRanges(
            JSON.parse(personalRangesDBRes.rangesJson) as DateRange[],
          );
          // –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ id –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∏ –≤ –±–¥
          if (personalRangesDBRes.id !== lsRangesId && lsRangesId) {
            // –∏ –µ—Å–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç, —Ç–æ
            // 1a) —É–¥–∞–ª—è–µ–º –∏–∑ –±–¥ —Ç–∞–±–ª–∏—Ü—ã PersonalSharedPlan –≤—Å–µ –∑–∞–ø–∏—Å–∏ —Å personalRangesId = id –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
            deletePersonalSharedRangesByPersonalRangesId({
              personalRangesId: lsRangesId,
            });
            // 1b) —É–¥–∞–ª—è–µ–º –∏–∑ –±–¥ —Ç–∞–±–ª–∏—Ü—ã PersonalRanges –≤—Å–µ –∑–∞–ø–∏—Å–∏ —Å id = id –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
            deletePersonalRangesById({ id: lsRangesId });
          }

          // 2) –∫–æ–ø–∏—Ä—É–µ–º –µ–≥–æ (personalRangesDBRes.id) –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
          // –∫–æ–ø–∏—Ä—É–µ–º id –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
          setLsRangesId(personalRangesDBRes?.id || '');
        } else {
          // –µ—Å–ª–∏ –Ω–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ –≤ –±–¥
          const lsRangesJson = localStorage.getItem('otpuskPlanRanges');
          const lsRangesId2 = localStorage.getItem('otpuskPlanLsRangesId');

          if (lsRangesJson) {
            const res = await upsertPersonalRangesByUserIdOrLsRangesId({
              userId: session.user.id,
              rangesJson: lsRangesJson,
              lsRangesId: JSON.parse(lsRangesId2 || ''),
            });
            console.log('üöÄ ~ ClientContainerVH ~ res-2:', res);
          }
        }
      }
    })();
  }, [session]);

  return (
    <SessionProvider session={session}>
      <ThemeContext.Provider
        value={{
          selectedYear,
          setSelectedYear,
          dateRanges,
          setDateRanges,
          lsRangesId,
          setLsRangesId,
          selectedDayOfYear,
          setSelectedDayOfYear,
          hoverDayOfYear,
          setHoverDayOfYear,
          selectedRange,
          setSelectedRange,
        }}
      >
        <div className='flex h-dvh flex-col'>{children}</div>
        <Toaster position='bottom-right' richColors />
      </ThemeContext.Provider>
    </SessionProvider>
  );
}

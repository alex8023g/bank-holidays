import type { Metadata } from 'next';
import { Geist, Geist_Mono } from 'next/font/google';
import './globals.css';
import { ContainerClientProviderVH } from '@/components/ContainerClientProviderVH';
import { authOptions } from '@/lib/auth';
import { getServerSession } from 'next-auth/next';
import Header2 from '@/components/Header2';
import { cookies } from 'next/headers';
import {
  createPersonalRangesEmpty,
  getPersonalRangesByUserId2,
} from '@/lib/actions';

const geistSans = Geist({
  variable: '--font-geist-sans',
  subsets: ['latin'],
});

const geistMono = Geist_Mono({
  variable: '--font-geist-mono',
  subsets: ['latin'],
});

export const metadata: Metadata = {
  title: 'Create Next App',
  description: 'Generated by create next app',
};

export default async function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  let personalRangesId: string | undefined = undefined;

  const cookieStore = await cookies();

  const personalRangesIdFromCookie = cookieStore.get('personalRangesId')?.value;

  const session = await getServerSession(authOptions);

  let personalRangesIdFromSession: string | undefined = undefined;

  if (session?.user.id) {
    const personalRangesRes = await getPersonalRangesByUserId2({
      userId: session.user.id,
    });

    if (personalRangesRes.status === 'success') {
      personalRangesIdFromSession = personalRangesRes.personalRanges.id;
    } else if (personalRangesRes.status === 'not found') {
      personalRangesIdFromSession = undefined;
    } else if (personalRangesRes.status === 'error') {
      console.error(personalRangesRes.error);
      return <div>Сервис временно недоступен</div>;
    }
  }

  if (personalRangesIdFromSession) {
    personalRangesId = personalRangesIdFromSession;
  } else if (personalRangesIdFromCookie) {
    personalRangesId = personalRangesIdFromCookie;
  } else {
    const res = await createPersonalRangesEmpty();
    if (res.ok) {
      personalRangesId = res.personalRanges.id;
    } else {
      return <div>Сервис временно недоступен</div>;
    }
  }

  return (
    <html lang='en'>
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        <ContainerClientProviderVH
          session={session}
          personalRangesId={personalRangesId}
          personalRangesIdFromCookie={personalRangesIdFromCookie}
        >
          <Header2 session={session} />
          {children}
        </ContainerClientProviderVH>
      </body>
    </html>
  );
}

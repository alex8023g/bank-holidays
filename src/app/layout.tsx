import type { Metadata } from 'next';
import { Geist, Geist_Mono } from 'next/font/google';
import './globals.css';
import { ContainerClientProviderVH } from '@/components/ContainerClientProviderVH';
import { authOptions } from '@/lib/auth';
import { getServerSession } from 'next-auth/next';
import Header2 from '@/components/Header2';
import { cookies } from 'next/headers';
import { getSharedRangesByPersonalRangesId } from '@/lib/actions';

const geistSans = Geist({
  variable: '--font-geist-sans',
  subsets: ['latin'],
});

const geistMono = Geist_Mono({
  variable: '--font-geist-mono',
  subsets: ['latin'],
});

export const metadata: Metadata = {
  title: 'Create Next App',
  description: 'Generated by create next app',
};

export default async function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const session = await getServerSession(authOptions);
  console.log('ðŸš€ ~ RootLayout ~ session:', session);

  const cookieStore = await cookies();
  const personalRangesId = cookieStore.get('personalRangesId')?.value;
  console.log('ðŸš€ ~ RootLayout ~ personalRangesId:', personalRangesId);
  const sharedRangesRes = await getSharedRangesByPersonalRangesId({
    personalRangesId: personalRangesId || '',
  });
  console.log('ðŸš€ ~ RootLayout ~ sharedRangesRes:', sharedRangesRes);
  return (
    <html lang='en'>
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        <ContainerClientProviderVH
          session={session}
          personalRangesId={personalRangesId}
        >
          <Header2 session={session} />
          {children}
        </ContainerClientProviderVH>
      </body>
    </html>
  );
}
